{
    "0010-hello-world": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import \"fmt\"",
            "",
            "func main() {",
            "    fmt.Println(\"Hello world!\")",
            "}",
            ""
        ]
    },
    "0020-api-starter": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"flag\"",
            "    \"fmt\"",
            "    \"log\"",
            "    \"net/http\"",
            "    \"os\"",
            "    \"time\"",
            ")",
            "",
            "const version = \"1.0.0\"",
            "",
            "type config struct {",
            "    port int",
            "    env  string",
            "}",
            "",
            "type application struct {",
            "    config config",
            "    logger *log.Logger",
            "}",
            "",
            "func main() {",
            "    var cfg config",
            "",
            "    // Read the value of the port and env command-line flags into the config struct",
            "    flag.IntVar(&cfg.port, \"port\", 4000, \"API server port\")",
            "    flag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")",
            "    flag.Parse()",
            "",
            "    // Create a new logger",
            "    logger := log.New(os.Stdout, \"\", log.Ldate | log.Ltime)",
            "",
            "    app := &application{",
            "        config: cfg,",
            "        logger: logger,",
            "    }",
            "",
            "    // Declare a new servemux and add route",
            "    mux := http.NewServeMux()",
            "    mux.HandleFunc(\"/healthcheck\", app.healthcheckHandler)",
            "",
            "    // Declare a HTTP server",
            "    srv := &http.Server{",
            "        Addr:         fmt.Sprintf(\":%d\", cfg.port),",
            "        Handler:      mux,",
            "        IdleTimeout:  time.Minute,",
            "        ReadTimeout:  10 * time.Second,",
            "        WriteTimeout: 30 * time.Second,",
            "    }",
            "",
            "    // Start the HTTP server.",
            "    logger.Printf(\"starting %s server on %s\", cfg.env, srv.Addr)",
            "    err := srv.ListenAndServe()",
            "    logger.Fatal(err)",
            "}"
        ],
        "description": ""
    },
    "0030-api-starter-healthcheck": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"fmt\"",
            "    \"net/http\"",
            ")",
            "",
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    fmt.Fprintln(w, \"status: available\")",
            "    fmt.Fprintf(w, \"environment: %s\\n\", app.config.env)",
            "    fmt.Fprintf(w, \"version: %s\\n\", version)",
            "}",
            ""
        ],
        "description": ""
    },
    "0040-basic-router": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"net/http\"",
            "",
            "    \"github.com/julienschmidt/httprouter\"",
            ")",
            "",
            "func (app *application) routes() *httprouter.Router {",
            "    // Create a new httprouter router instance.",
            "    router := httprouter.New()",
            "",
            "    // Register routes",
            "    router.HandlerFunc(http.MethodGet, \"/healthcheck\", app.healthcheckHandler)",
            "    router.HandlerFunc(http.MethodPost, \"/heroes\", app.createHeroHandler)",
            "    router.HandlerFunc(http.MethodGet, \"/heroes/:id\", app.showHeroHandler)",
            "",
            "    // Return the httprouter instance.",
            "    return router",
            "}",
            ""
        ],
        "description": ""
    },
    "0050-http-server-with-router": {
        "prefix": "go",
        "body": [
            "    srv := &http.Server{",
            "        Addr:         fmt.Sprintf(\":%d\", cfg.port),",
            "        Handler:      app.routes(),",
            "        IdleTimeout:  time.Minute,",
            "        ReadTimeout:  10 * time.Second,",
            "        WriteTimeout: 30 * time.Second,",
            "    }"
        ],
        "description": ""
    },
    "0060-basic-hero-handlers": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"fmt\"",
            "    \"net/http\"",
            "    \"strconv\" ",
            "",
            "    \"github.com/julienschmidt/httprouter\" ",
            ")",
            "",
            "func (app *application) createHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    fmt.Fprintln(w, \"create a new hero\")",
            "}",
            "",
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    params := httprouter.ParamsFromContext(r.Context())",
            "",
            "    id, err := strconv.ParseInt(params.ByName(\"id\"), 10, 64)",
            "    if err != nil || id < 1 {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    fmt.Fprintf(w, \"show the details of hero %d\\n\", id)",
            "}",
            ""
        ],
        "description": ""
    },
    "0070-get-id-param": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"errors\"",
            "    \"net/http\"",
            "    \"strconv\"",
            "",
            "    \"github.com/julienschmidt/httprouter\"",
            ")",
            "",
            "func (app *application) readIDParam(r *http.Request) (int64, error) {",
            "    params := httprouter.ParamsFromContext(r.Context())",
            "",
            "    id, err := strconv.ParseInt(params.ByName(\"id\"), 10, 64)",
            "    if err != nil || id < 1 {",
            "        return 0, errors.New(\"invalid id parameter\")",
            "    }",
            "",
            "    return id, nil",
            "}",
            ""
        ],
        "description": ""
    },
    "0080-update-show-hero": {
        "prefix": "go",
        "body": [
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    id, err := app.readIDParam(r)",
            "    if err != nil {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    fmt.Fprintf(w, \"show the details of hero %d\\n\", id)",
            "}"
        ],
        "description": ""
    },
    "0090-healthcheck-json": {
        "prefix": "go",
        "body": [
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    js := `{\"status\": \"available\", \"environment\": %q, \"version\": %q}`",
            "    js = fmt.Sprintf(js, app.config.env, version)",
            "",
            "    w.Header().Set(\"Content-Type\", \"application/json\")",
            "",
            "    w.Write([]byte(js))",
            "}"
        ],
        "description": ""
    },
    "0100-writeJSON": {
        "prefix": "go",
        "body": [
            "func (app *application) writeJSON(w http.ResponseWriter, status int, data interface{}, headers http.Header) error {",
            "    // Note that you could also use `json.NewEncoder(w).Encode(data)`.",
            "    // Code becomes slightly simpler, but you have less control over",
            "    // http headers in case of serialization errors.",
            "",
            "    js, err := json.Marshal(data)",
            "    if err != nil {",
            "        return err",
            "    }",
            "",
            "    // Append a newline to make it easier to view in terminal applications.",
            "    js = append(js, '\\n')",
            "",
            "    // Loop through the header map and add each header",
            "    for key, value := range headers {",
            "        w.Header()[key] = value",
            "    }",
            "",
            "    w.Header().Set(\"Content-Type\", \"application/json\")",
            "    w.WriteHeader(status)",
            "    w.Write(js)",
            "",
            "    return nil",
            "}",
            ""
        ],
        "description": ""
    },
    "0110-healthcheck-writeJSON": {
        "prefix": "go",
        "body": [
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    data := map[string]string{",
            "        \"status\":      \"available\",",
            "        \"environment\": app.config.env,",
            "        \"version\":     version,",
            "    }",
            "",
            "    err := app.writeJSON(w, http.StatusOK, data, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    },
    "0120-hero": {
        "prefix": "go",
        "body": [
            "package data",
            "",
            "import (",
            "    \"time\"",
            ")",
            "",
            "type Hero struct {",
            "    ID        int64     `json:\"id\"`             // Unique integer ID for a hero",
            "    CreatedAt time.Time `json:\"-\"`              // Timestamp for when the hero is added to our list of heroes",
            "    Name      string    `json:\"name\"`           // Name of hero",
            "    RealName  string    `json:\"realName\"`       // Hero's real name",
            "    Coolness  int32     `json:\"coolness\"`       // Coolness factor of hero",
            "    Tags      []string  `json:\"tags,omitempty\"` // Slice of tags for the hero",
            "    CanFly    bool      `json:\"canFly\"`         // Indicates whether the hero can fly",
            "}",
            ""
        ],
        "description": ""
    },
    "0130-show-hero": {
        "prefix": "go",
        "body": [
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    id, err := app.readIDParam(r)",
            "    if err != nil {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    hero := data.Hero{",
            "        ID:        id,",
            "        CreatedAt: time.Now(),",
            "        Name:      \"Homelander\",",
            "        RealName:  \"John\",",
            "        Coolness:  9,",
            "        Tags:      []string{\"The Boys\", \"Evil\"},",
            "        CanFly:    true,",
            "    }",
            "",
            "    err = app.writeJSON(w, http.StatusOK, hero, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    }
}