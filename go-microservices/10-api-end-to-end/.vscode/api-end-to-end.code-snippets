{
    "0010-hello-world": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import \"fmt\"",
            "",
            "func main() {",
            "    fmt.Println(\"Hello world!\")",
            "}",
            ""
        ]
    },
    "0020-api-starter": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"flag\"",
            "    \"fmt\"",
            "    \"log\"",
            "    \"net/http\"",
            "    \"os\"",
            "    \"time\"",
            ")",
            "",
            "const version = \"1.0.0\"",
            "",
            "type config struct {",
            "    port int",
            "    env  string",
            "}",
            "",
            "type application struct {",
            "    config config",
            "    logger *log.Logger",
            "}",
            "",
            "func main() {",
            "    var cfg config",
            "",
            "    // Read the value of the port and env command-line flags into the config struct",
            "    flag.IntVar(&cfg.port, \"port\", 4000, \"API server port\")",
            "    flag.StringVar(&cfg.env, \"env\", \"development\", \"Environment (development|staging|production)\")",
            "    flag.Parse()",
            "",
            "    // Create a new logger",
            "    logger := log.New(os.Stdout, \"\", log.Ldate | log.Ltime)",
            "",
            "    app := &application{",
            "        config: cfg,",
            "        logger: logger,",
            "    }",
            "",
            "    // Declare a new servemux and add route",
            "    mux := http.NewServeMux()",
            "    mux.HandleFunc(\"/healthcheck\", app.healthcheckHandler)",
            "",
            "    // Declare a HTTP server",
            "    srv := &http.Server{",
            "        Addr:         fmt.Sprintf(\":%d\", cfg.port),",
            "        Handler:      mux,",
            "        IdleTimeout:  time.Minute,",
            "        ReadTimeout:  10 * time.Second,",
            "        WriteTimeout: 30 * time.Second,",
            "    }",
            "",
            "    // Start the HTTP server.",
            "    logger.Printf(\"starting %s server on %s\", cfg.env, srv.Addr)",
            "    err := srv.ListenAndServe()",
            "    logger.Fatal(err)",
            "}"
        ],
        "description": ""
    },
    "0030-api-starter-healthcheck": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"fmt\"",
            "    \"net/http\"",
            ")",
            "",
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    fmt.Fprintln(w, \"status: available\")",
            "    fmt.Fprintf(w, \"environment: %s\\n\", app.config.env)",
            "    fmt.Fprintf(w, \"version: %s\\n\", version)",
            "}",
            ""
        ],
        "description": ""
    },
    "0040-basic-router": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"net/http\"",
            "",
            "    \"github.com/julienschmidt/httprouter\"",
            ")",
            "",
            "func (app *application) routes() *httprouter.Router {",
            "    // Create a new httprouter router instance.",
            "    router := httprouter.New()",
            "",
            "    // Register routes",
            "    router.HandlerFunc(http.MethodGet, \"/healthcheck\", app.healthcheckHandler)",
            "    router.HandlerFunc(http.MethodPost, \"/heroes\", app.createHeroHandler)",
            "    router.HandlerFunc(http.MethodGet, \"/heroes/:id\", app.showHeroHandler)",
            "",
            "    // Return the httprouter instance.",
            "    return router",
            "}",
            ""
        ],
        "description": ""
    },
    "0050-http-server-with-router": {
        "prefix": "go",
        "body": [
            "    srv := &http.Server{",
            "        Addr:         fmt.Sprintf(\":%d\", cfg.port),",
            "        Handler:      app.routes(),",
            "        IdleTimeout:  time.Minute,",
            "        ReadTimeout:  10 * time.Second,",
            "        WriteTimeout: 30 * time.Second,",
            "    }"
        ],
        "description": ""
    },
    "0060-basic-hero-handlers": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"fmt\"",
            "    \"net/http\"",
            "    \"strconv\" ",
            "",
            "    \"github.com/julienschmidt/httprouter\" ",
            ")",
            "",
            "func (app *application) createHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    fmt.Fprintln(w, \"create a new hero\")",
            "}",
            "",
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    params := httprouter.ParamsFromContext(r.Context())",
            "",
            "    id, err := strconv.ParseInt(params.ByName(\"id\"), 10, 64)",
            "    if err != nil || id < 1 {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    fmt.Fprintf(w, \"show the details of hero %d\\n\", id)",
            "}",
            ""
        ],
        "description": ""
    },
    "0070-get-id-param": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"errors\"",
            "    \"net/http\"",
            "    \"strconv\"",
            "",
            "    \"github.com/julienschmidt/httprouter\"",
            ")",
            "",
            "func (app *application) readIDParam(r *http.Request) (int64, error) {",
            "    params := httprouter.ParamsFromContext(r.Context())",
            "",
            "    id, err := strconv.ParseInt(params.ByName(\"id\"), 10, 64)",
            "    if err != nil || id < 1 {",
            "        return 0, errors.New(\"invalid id parameter\")",
            "    }",
            "",
            "    return id, nil",
            "}",
            ""
        ],
        "description": ""
    },
    "0080-update-show-hero": {
        "prefix": "go",
        "body": [
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    id, err := app.readIDParam(r)",
            "    if err != nil {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    fmt.Fprintf(w, \"show the details of hero %d\\n\", id)",
            "}"
        ],
        "description": ""
    },
    "0090-healthcheck-json": {
        "prefix": "go",
        "body": [
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    js := `{\"status\": \"available\", \"environment\": %q, \"version\": %q}`",
            "    js = fmt.Sprintf(js, app.config.env, version)",
            "",
            "    w.Header().Set(\"Content-Type\", \"application/json\")",
            "",
            "    w.Write([]byte(js))",
            "}"
        ],
        "description": ""
    },
    "0100-writeJSON": {
        "prefix": "go",
        "body": [
            "func (app *application) writeJSON(w http.ResponseWriter, status int, data interface{}, headers http.Header) error {",
            "    // Note that you could also use `json.NewEncoder(w).Encode(data)`.",
            "    // Code becomes slightly simpler, but you have less control over",
            "    // http headers in case of serialization errors.",
            "",
            "    // MarshalIndent will add whitespaces to make JSON easier to read",
            "    // (as opposed to     hal).",
            "    js, err :=     halIndent(data, \"\", \"\\t\")",
            "",
            "    if err != nil {",
            "        return err",
            "    }",
            "",
            "    // Append a newline to make it easier to view in terminal applications.",
            "    js = append(js, '\\n')",
            "",
            "    // Loop through the header map and add each header",
            "    for key, value := range headers {",
            "        w.Header()[key] = value",
            "    }",
            "",
            "    w.Header().Set(\"Content-Type\", \"application/json\")",
            "    w.WriteHeader(status)",
            "    w.Write(js)",
            "",
            "    return nil",
            "}",
            ""
        ],
        "description": ""
    },
    "0110-healthcheck-writeJSON": {
        "prefix": "go",
        "body": [
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    data := map[string]string{",
            "        \"status\":      \"available\",",
            "        \"environment\": app.config.env,",
            "        \"version\":     version,",
            "    }",
            "",
            "    err := app.writeJSON(w, http.StatusOK, data, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    },
    "0120-hero": {
        "prefix": "go",
        "body": [
            "package data",
            "",
            "import (",
            "    \"time\"",
            ")",
            "",
            "type Hero struct {",
            "    ID        int64     `json:\"id\"`             // Unique integer ID for a hero",
            "    CreatedAt time.Time `json:\"-\"`              // Timestamp for when the hero is added to our list of heroes",
            "    Name      string    `json:\"name\"`           // Name of hero",
            "    RealName  string    `json:\"realName\"`       // Hero's real name",
            "    Coolness  int32     `json:\"coolness\"`       // Coolness factor of hero",
            "    Tags      []string  `json:\"tags,omitempty\"` // Slice of tags for the hero",
            "    CanFly    bool      `json:\"canFly\"`         // Indicates whether the hero can fly",
            "}",
            ""
        ],
        "description": ""
    },
    "0130-show-hero": {
        "prefix": "go",
        "body": [
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    id, err := app.readIDParam(r)",
            "    if err != nil {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    hero := data.Hero{",
            "        ID:        id,",
            "        CreatedAt: time.Now(),",
            "        Name:      \"Homelander\",",
            "        RealName:  \"John\",",
            "        Coolness:  9,",
            "        Tags:      []string{\"The Boys\", \"Evil\"},",
            "        CanFly:    true,",
            "    }",
            "",
            "    err = app.writeJSON(w, http.StatusOK, hero, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    },
    "0140-writeJSON-envelope": {
        "prefix": "go",
        "body": [
            "// Envelope type.",
            "type envelope map[string]interface{}",
            "",
            "func (app *application) writeJSON(w http.ResponseWriter, status int, data envelope, headers http.Header) error {",
            "    js, err :=     halIndent(data, \"\", \"\\t\")",
            "    if err != nil {",
            "        return err",
            "    }",
            "",
            "    js = append(js, '\\n')",
            "",
            "    for key, value := range headers {",
            "        w.Header()[key] = value",
            "    }",
            "",
            "    w.Header().Set(\"Content-Type\", \"application/json\")",
            "    w.WriteHeader(status)",
            "    w.Write(js)",
            "",
            "    return nil",
            "}"
        ],
        "description": ""
    },
    "0150-showHero-envelope": {
        "prefix": "go",
        "body": [
            "func (app *application) showHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    id, err := app.readIDParam(r)",
            "    if err != nil {",
            "        http.NotFound(w, r)",
            "        return",
            "    }",
            "",
            "    hero := data.Hero{",
            "        ID:        id,",
            "        CreatedAt: time.Now(),",
            "        Name:      \"Homelander\",",
            "        RealName:  \"John\",",
            "        Coolness:  9,",
            "        Tags:      []string{\"The Boys\", \"Evil\"},",
            "        CanFly:    true,",
            "    }",
            "",
            "    err = app.writeJSON(w, http.StatusOK, envelope{\"hero\": hero}, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    },
    "0160-healthcheck-envelope": {
        "prefix": "go",
        "body": [
            "func (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {",
            "    env := envelope{",
            "        \"status\": \"available\",",
            "        \"system_info\": map[string]string{",
            "            \"environment\": app.config.env,",
            "            \"version\":     version,",
            "        },",
            "    }",
            "",
            "    err := app.writeJSON(w, http.StatusOK, env, nil)",
            "    if err != nil {",
            "        app.logger.Println(err)",
            "        http.Error(w, \"The server encountered a problem and could not process your request\", http.StatusInternalServerError)",
            "    }",
            "}"
        ],
        "description": ""
    },
    "0170-MarshalJSON-CanFly": {
        "prefix": "go",
        "body": [
            "package data",
            "",
            "import (",
            "    \"encoding/json\"",
            "    \"errors\"",
            "    \"strconv\"",
            ")",
            "",
            "type CanFly bool",
            "",
            "func (c CanFly) MarshalJSON() ([]byte, error) {",
            "    var jsonValue string",
            "    if c {",
            "        jsonValue = \"yes\"",
            "    } else {",
            "        jsonValue = \"no\"",
            "    }",
            "",
            "    quotedJSONValue := strconv.Quote(jsonValue)",
            "",
            "    return []byte(quotedJSONValue), nil",
            "}",
            "",
            "var ErrInvalidCanFlyFormat = errors.New(\"invalid format for 'can fly'\")",
            "",
            "func (c *CanFly) UnmarshalJSON(b []byte) error {",
            "    canFlyStr, err := strconv.Unquote(string(b))",
            "    if err != nil {",
            "        return ErrInvalidCanFlyFormat",
            "    }",
            "",
            "    switch canFlyStr {",
            "    case \"yes\":",
            "        *c = true",
            "    case \"no\":",
            "        *c = false",
            "    default:",
            "        return &json.UnmarshalTypeError{}",
            "    }",
            "",
            "    return nil",
            "}",
            ""
        ],
        "description": ""
    },
    "0180-errors": {
        "prefix": "go",
        "body": [
            "package main",
            "",
            "import (",
            "    \"fmt\"",
            "    \"net/http\"",
            ")",
            "",
            "func (app *application) logError(r *http.Request, err error) {",
            "    app.logger.Println(err)",
            "}",
            "",
            "func (app *application) errorResponse(w http.ResponseWriter, r *http.Request, status int, message interface{}) {",
            "    env := envelope{\"error\": message}",
            "",
            "    err := app.writeJSON(w, status, env, nil)",
            "    if err != nil {",
            "        app.logError(r, err)",
            "        w.WriteHeader(500)",
            "    }",
            "}",
            "",
            "func (app *application) serverErrorResponse(w http.ResponseWriter, r *http.Request, err error) {",
            "    app.logError(r, err)",
            "",
            "    message := \"the server encountered a problem and could not process your request\"",
            "    app.errorResponse(w, r, http.StatusInternalServerError, message)",
            "}",
            "",
            "func (app *application) notFoundResponse(w http.ResponseWriter, r *http.Request) {",
            "    message := \"the requested resource could not be found\"",
            "    app.errorResponse(w, r, http.StatusNotFound, message)",
            "}",
            "",
            "func (app *application) methodNotAllowedResponse(w http.ResponseWriter, r *http.Request) {",
            "    message := fmt.Sprintf(\"the %s method is not supported for this resource\", r.Method)",
            "    app.errorResponse(w, r, http.StatusMethodNotAllowed, message)",
            "}",
            "",
            "func (app *application) badRequestResponse(w http.ResponseWriter, r *http.Request, err error) {",
            "    app.errorResponse(w, r, http.StatusBadRequest, err.Error())",
            "}",
            "",
            "func (app *application) failedValidationResponse(w http.ResponseWriter, r *http.Request, errors map[string]string) {",
            "    app.errorResponse(w, r, http.StatusUnprocessableEntity, errors)",
            "}",
            ""
        ],
        "description": ""
    },
    "0190-error": {
        "prefix": "go",
        "body": [
            "app.serverErrorResponse(w, r, err)"
        ],
        "description": ""
    },
    "0200-routing-errors": {
        "prefix": "go",
        "body": [
            "    router.NotFound = http.HandlerFunc(app.notFoundResponse)",
            "    router.MethodNotAllowed = http.HandlerFunc(app.methodNotAllowedResponse)",
            ""
        ],
        "description": ""
    },
    "0210-createHero-json-parse": {
        "prefix": "go",
        "body": [
            "func (app *application) createHeroHandler(w http.ResponseWriter, r *http.Request) {",
            "    var input struct {",
            "        Name     string      `json:\"name\"`",
            "        RealName string      `json:\"realName\"`",
            "        Coolness int32       `json:\"coolness\"`",
            "        Tags     []string    `json:\"tags\"`",
            "        CanFly   data.CanFly `json:\"canFly\"`",
            "    }",
            "",
            "    err := json.NewDecoder(r.Body).Decode(&input)",
            "    if err != nil {",
            "        app.errorResponse(w, r, http.StatusBadRequest, err.Error())",
            "        return",
            "    }",
            "",
            "    fmt.Fprintf(w, \"%+v\\n\", input)",
            "}"
        ],
        "description": ""
    },
    "0220-readJSON": {
        "prefix": "go",
        "body": [
            "func (app *application) readJSON(w http.ResponseWriter, r *http.Request, dst interface{}) error {",
            "    err := json.NewDecoder(r.Body).Decode(dst)",
            "    if err != nil {",
            "        // If there is an error during decoding, start the triage...",
            "        var syntaxError *json.SyntaxError",
            "        var unmarshalTypeError *json.UnmarshalTypeError",
            "        var invalidUnmarshalError *json.InvalidUnmarshalError",
            "",
            "        switch {",
            "        case errors.As(err, &syntaxError):",
            "            return fmt.Errorf(\"body contains badly-formed JSON (at character %d)\", syntaxError.Offset)",
            "",
            "        case errors.Is(err, io.ErrUnexpectedEOF):",
            "            return errors.New(\"body contains badly-formed JSON\")",
            "",
            "        case errors.As(err, &unmarshalTypeError):",
            "            if unmarshalTypeError.Field != \"\" {",
            "                return fmt.Errorf(\"body contains incorrect JSON type for field %q\", unmarshalTypeError.Field)",
            "            }",
            "            return fmt.Errorf(\"body contains incorrect JSON type (at character %d)\", unmarshalTypeError.Offset)",
            "",
            "        case errors.Is(err, io.EOF):",
            "            return errors.New(\"body must not be empty\")",
            "",
            "        case errors.As(err, &invalidUnmarshalError):",
            "            panic(err)",
            "",
            "        default:",
            "            return err",
            "        }",
            "    }",
            "",
            "    return nil",
            "}"
        ],
        "description": ""
    },
    "0230-apply-readJSON": {
        "prefix": "go",
        "body": [
            "    err := app.readJSON(w, r, &input)",
            "    if err != nil {",
            "        app.badRequestResponse(w, r, err) ",
            "        return",
            "    }"
        ],
        "description": ""
    },
    "0240-validation-helpers": {
        "prefix": "go",
        "body": [
            "package validator",
            "",
            "type Validator struct {",
            "    Errors map[string]string",
            "}",
            "",
            "func New() *Validator {",
            "    return &Validator{Errors: make(map[string]string)}",
            "}",
            "",
            "// Valid returns true if the errors map doesn't contain any entries.",
            "func (v *Validator) Valid() bool {",
            "    return len(v.Errors) == 0",
            "}",
            "",
            "// AddError adds an error message to the map.",
            "func (v *Validator) AddError(key, message string) {",
            "    if _, exists := v.Errors[key]; !exists {",
            "        v.Errors[key] = message",
            "    }",
            "}",
            "",
            "// Check adds an error message to the map only if a validation check is not 'ok'.",
            "func (v *Validator) Check(ok bool, key, message string) {",
            "    if !ok {",
            "        v.AddError(key, message)",
            "    }",
            "}",
            "",
            "// In returns true if a specific value is in a list of strings.",
            "func In(value string, list ...string) bool {",
            "    for i := range list {",
            "        if value == list[i] {",
            "            return true",
            "        }",
            "    }",
            "    return false",
            "}",
            "",
            "// Unique returns true if all string values in a slice are unique.",
            "func Unique(values []string) bool {",
            "    uniqueValues := make(map[string]bool)",
            "",
            "    for _, value := range values {",
            "        uniqueValues[value] = true",
            "    }",
            "",
            "    return len(values) == len(uniqueValues)",
            "}",
            ""
        ],
        "description": ""
    },
    "0250-validate-hero": {
        "prefix": "go",
        "body": [
            "func ValidateHero(v *validator.Validator, movie *Hero) {",
            "    v.Check(movie.Name != \"\", \"name\", \"must not be empty\")",
            "    v.Check(len(movie.Name) <= 100, \"name\", \"must not be more than 100 bytes long\")",
            "",
            "    v.Check(movie.Coolness >= 0 && movie.Coolness <= 9, \"coolness\", \"must be between 0 and 9\")",
            "",
            "    v.Check(movie.Tags != nil, \"tags\", \"must be provided\")",
            "    v.Check(len(movie.Tags) >= 1, \"tags\", \"must contain at least 1 tag\")",
            "    v.Check(len(movie.Tags) <= 5, \"tags\", \"must not contain more than 5 tags\")",
            "    v.Check(validator.Unique(movie.Tags), \"tags\", \"must not contain duplicate values\")",
            "}",
            ""
        ],
        "description": ""
    },
    "0260-use-validations": {
        "prefix": "go",
        "body": [
            "    // You could consider creating deep copies using JSON marshal,",
            "    // ProtoBuf marshal, deepcopier, etc.",
            "    hero := &data.Hero{",
            "        Name:     input.Name,",
            "        RealName: input.RealName,",
            "        Coolness: input.Coolness,",
            "        Tags:     input.Tags,",
            "        CanFly:   input.CanFly,",
            "    }",
            "",
            "    v := validator.New()",
            "    if data.ValidateHero(v, hero); !v.Valid() {",
            "        app.failedValidationResponse(w, r, v.Errors)",
            "        return",
            "    }"
        ],
        "description": ""
    },
    "0270-add-negroni-middleware": {
        "prefix": "go",
        "body": [
            "    n := negroni.New()",
            "    r := negroni.NewRecovery()",
            "    r.PrintStack = false",
            "    n.Use(r)",
            "    n.Use(negroni.NewLogger())",
            "    n.Use(cors.AllowAll())",
            "    n.UseHandler(app.routes())",
            "",
            "    srv := &http.Server{",
            "        Addr:         fmt.Sprintf(\":%d\", cfg.port),",
            "        Handler:      n,",
            "        IdleTimeout:  time.Minute,",
            "        ReadTimeout:  10 * time.Second,",
            "        WriteTimeout: 30 * time.Second,",
            "    }"
        ],
        "description": ""
    },
    "0280-add-crasher": {
        "prefix": "go",
        "body": [
            "func (app *application) crash(w http.ResponseWriter, r *http.Request) {",
            "    panic(\"Something bad happened!\")",
            "}"
        ],
        "description": ""
    },
    "0290-add-crash-route": {
        "prefix": "go",
        "body": [
            "router.HandlerFunc(http.MethodGet, \"/crash\", app.crash)"
        ],
        "description": ""
    }
}