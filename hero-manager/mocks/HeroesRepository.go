// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	data "heroes.rainerstropek.com/internal/data"
)

// HeroesRepository is an autogenerated mock type for the HeroesRepository type
type HeroesRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *HeroesRepository) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *HeroesRepository) Get(id int64) (*data.Hero, error) {
	ret := _m.Called(id)

	var r0 *data.Hero
	if rf, ok := ret.Get(0).(func(int64) *data.Hero); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Hero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: name, abilities, filters
func (_m *HeroesRepository) GetAll(name string, abilities []string, filters data.Filters) ([]*data.Hero, error) {
	ret := _m.Called(name, abilities, filters)

	var r0 []*data.Hero
	if rf, ok := ret.Get(0).(func(string, []string, data.Filters) []*data.Hero); ok {
		r0 = rf(name, abilities, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Hero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, data.Filters) error); ok {
		r1 = rf(name, abilities, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: hero
func (_m *HeroesRepository) Insert(hero *data.Hero) error {
	ret := _m.Called(hero)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Hero) error); ok {
		r0 = rf(hero)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: hero
func (_m *HeroesRepository) Update(hero *data.Hero) error {
	ret := _m.Called(hero)

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Hero) error); ok {
		r0 = rf(hero)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
